@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
!pragma layout smetana

abstract Clock {
#repaintPeriod : int
#hoursOffsetTimeZone : int
#lastTimeRepaint : LocalDateTime
#jPanel : JPanel
{abstract}#isTimeToRepaint(now : LocalDateTime): boolean
{abstract}+show()
}

class ClockTimer {
  - timer : Timer
  - period : int

}
class DigitalClock extends Clock {
-formatter : DateTimeFormatter
-clockLabel : JLabel
#isTimeToRepaint(now : LocalDateTime): boolean
+show()
+update(o: Observable, arg : Object)
-updateClockLabel()
}

class AnalogClock extends Clock {
-worldPlace : String
#isTimeToRepaint(now : LocalDateTime): boolean
+show()
+update(o: Observable, arg : Object)
-updateClockLabel()
}

class CountDownTimer extends Clock {
-countDown: Duration
-countDown: Duration
-amount : long
-chronoUnit: ChronoUnit
-clockLabel : JLabel
-initialTime : LocalDateTime
#isTimeToRepaint(now : LocalDateTime): boolean
+show()
+update(o: Observable, arg : Object)
-updateClockLabel()
-updateCountDown(now : LocalDateTime) : boolean
}

class StopWatch extends Clock {
-clockLabel : JLabel
-startStopButton : JButton
-countTime : Duration
-o : Observable
-active : boolean
#isTimeToRepaint(now : LocalDateTime): boolean
+show()
+update(o: Observable, arg : Object)
-updateClockLabel()
-startStopButtonPressed()
}


class "AnalogClock.MyJPanel" as MyJPanel {
  + paintComponent()
  + drawHand()
  + drawClockFace()
}

AnalogClock --> MyJPanel : inner class
package "java.util" {
abstract class Observable {
+setChanged()
+notifyObservers(arg : Object);
}
interface Observer{
{abstract}+update(o: Observable, arg : Object)
}

    Observable o-right->"*"Observer : observers
}

Clock ..up|> Observer
ClockTimer --up|> Observable


@enduml