@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0
!pragma layout smetana

abstract Widget {
#repaintPeriod : int
#jPanel : JPanel
{abstract}+show()
{abstract}#isTimeToRepaint(now : LocalDateTime): boolean
{abstract}-updateClockLabel()
}

abstract Clock extends Widget{
#repaintPeriod: int
#hoursOffsetTimeZone : int
#lastTimeRepaint : LocalDateTime
#worldPlace :  String
}

class ClockTimer {
- timer : Timer
- period : int
}

class DigitalClock extends Clock {
-formatter : DateTimeFormatter
-clockLabel : JLabel
}

class AnalogClock extends Clock {
-worldPlace : String
}

class CountDownTimer extends Widget {
-countDown: Duration
-countDown: Duration
-amount : long
-chronoUnit: ChronoUnit
-clockLabel : JLabel
-initialTime : LocalDateTime
-updateCountDown(now : LocalDateTime) : boolean
}

class StopWatch extends Widget {
-clockLabel : JLabel
-startStopButton : JButton
-countTime : Duration
-o : Observable
-active : boolean
-startStopButtonPressed()
}


class "AnalogClock.MyJPanel" as MyJPanel{
  + paintComponent()
  + drawHand()
  + drawClockFace()
}

AnalogClock --> MyJPanel : inner class
package "java" {

package "time" {
class LocalDateTime
class DateTimeFormatter
class Duration
DateTimeFormatter -[hidden]right-> LocalDateTime
}


package "swing"{
class JPanel
class JLabel
class JButton
JPanel -[hidden]right-> JLabel
}

package "util" {
abstract class Observable {
+setChanged()
+notifyObservers(arg : Object);
}
interface Observer{
{abstract}+update(o: Observable, arg : Object)
}

    Observable o-right->"*"Observer : observers
}
}

Widget ..up|> Observer
ClockTimer --up|> Observable

StopWatch --up|> Observable

MyJPanel --up|> JPanel

@enduml